// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @unique @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  email     String     @unique
  hash      String
  firstName String?    @unique
  lastName  String?    @unique
  isDeleted Boolean?   @default(false)
  Project   Project?   @relation(fields: [projectId], references: [id])
  projectId Int?
  role       Role     @default(USER)
  budgets    Budget[]
  permissions Permission[]
  group      GroupBudget?   @relation(fields: [groupId], references: [id])
  groupId    Int?
  report     Report?   @relation(fields: [reportId], references: [id])
  reportId   Int?

  @@map("users")
}

model Permission {
 id        Int        @id @unique @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  resource    Resource
  action      Action
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model Report {
  id        Int        @id @unique @default(autoincrement())
  group       GroupBudget   @relation(fields: [groupId], references: [id])
  groupId     Int @unique
  totalIncome Int
  totalExpense Int
  net         Int
  users       User[]
}

model GroupBudget {
  id        Int        @id @unique @default(autoincrement())
  users       User[]
  budgets     Budget[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  report      Report?
  reportId    Int? @unique
}

enum Resource {
  BUDGET
  INCOME
  EXPENSE
  GROUP_BUDGET
  REPORT
  COMMENT
}

enum Action {
  CREATE
  READ
  UPDATE
  DELETE
}

model Project {
  id        Int        @id @unique @default(autoincrement())
  title String
  users User[]
}

model Budget {
  id        Int       @id @unique @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  income    Income[]
  expense   Expense[]
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  group       GroupBudget   @relation(fields: [groupId], references: [id])
  groupId     Int
}

model Income {
  id          Int       @id @unique @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  title       String?   @db.VarChar(255)
  description String?
  type        String?
  isDeleted   Boolean?  @default(false)
  amount      Float
  frequency   Frequency
  budgetId    Int?
  Budget      Budget?   @relation(fields: [budgetId], references: [id])

  @@map("incomes")
}

model Expense {
  id          Int       @id @unique @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  title       String?   @db.VarChar(255)
  description String?
  type        String?
  isDeleted   Boolean?  @default(false)
  amount      Float
  frequency   Frequency
  budgetId    Int?
  Budget      Budget?   @relation(fields: [budgetId], references: [id])

  @@map("expenses")
}

enum Role {
  USER
  ADMIN
}

enum Frequency {
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  SEMIANNUALLY
  ANNUALLY
}
