// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @unique @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  email     String     @unique
  hash      String
  firstName String?    
  lastName  String?    
  isDeleted Boolean?   @default(false)
  role       Role     @default(USER)
  budgets    Budget[]
  permissions Permission[]
  groupBudgets      UsersOnGroupBudgets[]
  ownedGroupBudgets  GroupBudget[]
 reports      UsersOnReports[]
  ownedReports  Report[]
  managedBy User[]  @relation("UserManages") 
  managing  User[]  @relation("UserManages") 
  @@map("users")
}

model Permission {
 id        Int        @id @unique @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title String
  userId      Int
  resource    Resource
  action      Action
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model Report {
  id        Int        @id @unique @default(autoincrement())
  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id])
  title String
  description String?
  group       GroupBudget   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     Int @unique
  totalIncome Int
  totalExpense Int
  net         Int
  users       UsersOnReports[]
}

model UsersOnReports {
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId Int 
  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade) 
 reportId Int  
  assignedAt DateTime @default(now()) 
  @@id([userId, reportId]) 
}

model UsersOnGroupBudgets{
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId Int 
  groupBudget GroupBudget @relation(fields: [groupBudgetId], references: [id], onDelete: Cascade) 
  groupBudgetId Int  
  assignedAt DateTime @default(now()) 
  @@id([userId, groupBudgetId]) 
}

model GroupBudget {
  id        Int        @id @unique @default(autoincrement())
  title String
  description String?
  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id])
  users       UsersOnGroupBudgets[]
  budgets     BudgetsOnGroupBudgets[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  report      Report?
  reportId    Int? @unique
}

enum Resource {
  BUDGET
  INCOME
  EXPENSE
  GROUP_BUDGET
  REPORT
  COMMENT
}

enum Action {
  CREATE
  READ
  UPDATE
  DELETE
}

model BudgetsOnGroupBudgets {
  budget Budget @relation(fields: [budgetId], references: [id], onDelete: Cascade) 
  budgetId Int 
  groupBudget GroupBudget @relation(fields: [groupBudgetId], references: [id], onDelete: Cascade) 
  groupBudgetId Int  
  assignedAt DateTime @default(now()) 
  @@id([budgetId, groupBudgetId]) 
}


model Budget {
  id        Int       @id @unique @default(autoincrement())
  title String
  description String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  income    Income[]
  expense   Expense[]
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int
  group       BudgetsOnGroupBudgets[]  
  tags  TagsOnBudgets[]
}

model Income {
  id          Int       @id @unique @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  title       String?   @db.VarChar(255)
  description String?
  type        String?
  isDeleted   Boolean?  @default(false)
  amount      Float
  frequency   Frequency
  budgetId    Int?
  Budget      Budget?   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  tags  TagsOnIncomes[]

  @@map("incomes")
}

model Expense {
  id          Int       @id @unique @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  title       String?   @db.VarChar(255)
  description String?
  type        String?
  isDeleted   Boolean?  @default(false)
  amount      Float
  frequency   Frequency
  budgetId    Int?
  Budget      Budget?   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  tags  TagsOnExpenses[]

  @@map("expenses")
}

model Tag { 
  id    Int    @id @default(autoincrement()) 
  name  String @unique 
  budgets TagsOnBudgets[] 
  incomes TagsOnIncomes[]
  expenses TagsOnExpenses[]
} 

model TagsOnBudgets { 
  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade) 
  tagId Int 
  budget Budget @relation(fields: [budgetId], references: [id], onDelete: Cascade) 
  budgetId Int  
  assignedAt DateTime @default(now()) 
  @@id([tagId, budgetId]) 
}
model TagsOnIncomes { 
  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade) 
  tagId Int 
  income Income @relation(fields: [incomeId], references: [id], onDelete: Cascade) 
  incomeId Int  
  assignedAt DateTime @default(now()) 
  @@id([tagId, incomeId]) 
}
model TagsOnExpenses { 
  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade) 
  tagId Int 
  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade) 
  expenseId Int  
  assignedAt DateTime @default(now()) 
  @@id([tagId, expenseId]) 
}

enum Role {
  USER
  ADMIN
  STAFF
}

enum Frequency {
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  SEMIANNUALLY
  ANNUALLY
}
